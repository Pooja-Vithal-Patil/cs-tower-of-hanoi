# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CZ2UofTF2sCkGyCksg9p6CjAR-39mNXk
"""

import pickle
import csv
DISK_N =int(input("Enter the number of Disk\n"))
TOTAL_DISK = DISK_N
# KNOWLEDGE_BASE = {str(TOTAL_DISK):[]}
KNOWLEDGE_BASE = []
MOVES= []
print("\n")


def main(): 
    print('**Started**\n')

    toh = TowerOfHanoi(TOTAL_DISK)
    toh.run()
    toh.store_values()
    

    print('\n**Finished**')


class Tower: 
    """Represents a tower."""

    def __init__(self, name, n_disks = 0): 
        self.name = name
        self.disks = []

        for i in range(n_disks, 0, -1): 
            self.push(str(i))

    def push(self, disk): 
        self.disks.append(disk)

    def pop(self): 
        return self.disks.pop()

    def __str__(self): 
        disks = ''.join('{:<2}'.format(d) for d in self.disks)
        return '{}: {}'.format(self.name, disks)


class TowerOfHanoi:  
    """Represents the Tower of Hanoi's problem and solution."""

    def __init__(self, n_disk): 
        self.n_disk = n_disk
        self.n_move = 0
        self.prepare_towers()
        self.move = ""
        

    def prepare_towers(self): 
        a = Tower('A', self.n_disk)
        b = Tower('B')
        c = Tower('C')

        self.towers = [a, b, c]

    def run(self): 
        self.show_towers()
        a, b, c = self.towers
        self.move_disk(a, b, c, self.n_disk)

    def move_disk(self, a, b, c, n): 
        if n <= 0: 
            return

        self.move_disk(a, c, b, n - 1)

        self.n_move += 1
        self.move= 'move disk-{} from {} to {} ({}).'.format(str(n), a.name, b.name, self.n_move)
        print(self.move)
        step_add = {'step_number': self.n_move, 'step': self.move}
        KNOWLEDGE_BASE.append(step_add)
        
        disk = a.pop()
        b.push(disk)
        self.show_towers()

        self.move_disk(c, b, a, n - 1)

    def show_towers(self):
        for t in self.towers: 
            print(t)

    def store_values(self):
        
        try:
            with open('knowledgeBase_for_N_{}.csv'.format(TOTAL_DISK), 'w') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=['step_number','step'])
                writer.writeheader()
                writer.writerows(KNOWLEDGE_BASE)
                
        except IOError:
            print("I/O error")
        print("\n\n*****KNOWLEDGE BASE******\n")
        
        for data in KNOWLEDGE_BASE:
            print(data)



if __name__ == '__main__': 
    main()